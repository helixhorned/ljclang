
LJClang -- A LuaJIT-based interface to libclang
===============================================

### Table of Contents

@@[toc]


Introduction
------------

[LuaJIT]: https://luajit.org/
[libclang]: https://clang.llvm.org/doxygen/group__CINDEX.html
[luaclang-parser]: https://github.com/mkottman/luaclang-parser

LJClang is an interface to [libclang] for [LuaJIT], modeled after and mostly
API-compatible with [luaclang-parser] by Michal Kottman.


Requirements
------------

* LuaJIT 2.0 or greater

* LLVM/Clang -- from the Linux distribution or
  [here](https://apt.llvm.org/). Development is done using the latest stable
  version, but older versions should work mostly fine (except that interfaces
  exposed by newer version are not available, of course).


Building
--------

Invoking `make` builds the required support library `libljclang_support.so`,
converts libclang C headers into a form that can be used by LuaJIT (using a Lua
program that essentially strips text that would not be understood by LuaJIT's
`ffi.cdef`) and finally extracts additional information using LJClang itself.

The file `config.make` contains some user-facing configuration.


Overview
--------

LJClang provides a cursor-based, callback-driven API to the abstract syntax
tree (AST) of C/C++ source files. These are the main classes:

* `Index` -- represents a set of translation units that could be linked together
* `TranslationUnit` -- a source file together with everything included by it
  either directly or transitively
* `Cursor` -- points to an element in the AST in a translation unit such as a
  `typedef` declaration or a statement
* `Type` -- the type of an element (for example, that of a variable, structure
  member, or a function's input argument or return value)

To make something interesting happen, you usually create a single `Index`
object, parse into it one or more translation units, and define a callback
function to be invoked on each visit of a `Cursor` by libclang.


Example programs
----------------

### `extractdecls.lua`

[`enum CXCursorKind`]:
 https://clang.llvm.org/doxygen/group__CINDEX.html#gaaccc432245b4cd9f2d470913f9ef0013

The `extractdecls.lua` script accompanied by LJClang can be used to extract
various kinds of C declarations from (usually) headers and print them in
various forms usable as FFI C declarations or descriptive tables with LuaJIT.

@@[run]./extractdecls.lua

In fact, the file `ljclang_cursor_kind.lua` is generated by this program and is
used by LJClang to map values of the enumeration [`enum CXCursorKind`] to their
names. The `bootstrap` target in the `Makefile` extracts the relevant
information using these options:

~~~~~~~~~~
-Q -R -e 'CXCursorKind' -p '^CXCursor_' -s '^CXCursor_' \
    -x '_First' -x '_Last' -x '_GCCAsmStmt' -x '_MacroInstantiation' \
    -1 'CursorKindName = {' -2 '},'
~~~~~~~~~~


Thus, the enum constant names are filtered to be taken from `enum CXCursorKind`,
beginning with `CXCursor_` (that prefix being stripped) and all "secondary" names
aliasing the one considered the main one are rejected. (For example,
`CXCursor_AsmStmt` and `CXCursor_GCCAsmStmt` have the same value.) This yields
lines like

~~~~~~~~~~
[215] = "AsmStmt";
~~~~~~~~~~

### `watch_compile_commands.lua`

@@[run]./watch_compile_commands.lua


Reference
---------

The module returned by `require("ljclang")` -- called `clang` from here on --
contains the following:

@@clang.createIndex

#### `clang.ChildVisitResult`

[`enum CXChildVisitResult`]:
 https://clang.llvm.org/doxygen/group__CINDEX__CURSOR__TRAVERSAL.html#ga99a9058656e696b622fbefaf5207d715

An object mapping names to values to be returned
from cursor visitor callbacks. The names are identical with those in [`enum
CXChildVisitResult`] with the "`CXChildVisit_`" prefix removed: `Break`,
`Continue`, `Recurse`.

@@clang.regCursorVisitor

@@clang.Cursor

#### `clang.ErrorCode`

[`enum CXErrorCode`]:
 https://clang.llvm.org/doxygen/CXErrorCode_8h.html#adba17f287f8184fc266f2db4e669bf0f

An object mapping names to values representing success or various
error conditions. The names are identical to those in [`enum CXErrorCode`] with
the "`CXError_`" prefix removed.

### Index

@@index:parse


License
-------

Copyright (C) 2013-2020 Philipp Kutin. MIT licensed. See LICENSE for details.
