local ffi=require"ffi"

local assert = assert
local tonumber = tonumber

----------

local SIG_DFL = [[
@@ -m dev.exdecl_macro_def -p ^SIG_DFL$ /usr/include/signal.h
]]
-- Check that SIG_DFL is #defined as a null pointer cast.
assert(SIG_DFL:match([[^%(%(.*%)0%)
$]]))

ffi.cdef[[
struct dirent64;
]]

local d_name_offsets = {
@@ -m dev.exdecl_struct_property -A -D_LARGEFILE64_SOURCE=1 -p ^dirent6?4?$ -a offset:name=value -a d_name ./dev/posix.h
}
local dirent64_name_offset
do
    local offset = d_name_offsets["struct dirent"]
    local offset64 = d_name_offsets["struct dirent64"]

    -- glibc: we (deliberately) did not pass _D_FILE_OFFSET_BITS=64 to see the 32-bit
    --  __{ino,off}_t 'struct dirent'. We avoid using 'struct dirent' since it is defined
    --  differently depending on '#ifndef __USE_FILE_OFFSET64'.
    local isGlibc = ((offset ~= nil and offset64 ~= nil) and offset < offset64)
    -- musl: off_t is always 64-bit (see FAQ), definition of 'struct dirent' is always the
    --  same, but there is no 'dirent64' exposed as actual type, only as #define which our
    --  extractdecls path does not see through. It *is* possible to use 'readdir64' from
    --  LuaJIT though -- the symbol is present and just redirects to 'readdir', presumably.
    local isMusl = (offset64 == nil and offset ~= nil)
    assert(isGlibc or isMusl)

    dirent64_name_offset = isGlibc and offset64 or offset
    -- Ensure cross-build compatibility wrt this particular binary interface aspect.
    -- All the dance above just for that...
    assert(dirent64_name_offset == 19)
end

local uint8_ptr_t = ffi.typeof("const uint8_t *")
local dirent64_ptr_t = ffi.typeof("struct dirent64 *")

return {

getDirent64Name = function(dirent)
    assert(ffi.istype(dirent64_ptr_t, dirent))
    assert(dirent ~= nil)
    local ptr = ffi.cast(uint8_ptr_t, dirent) + dirent64_name_offset
    return ffi.string(ptr)
end,

POLL = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^POLLIN$ -s ^POLL ./dev/sys.h
}]],
-- NOTE: PF -> AF
AF = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^PF_INET$ -s ^PF_ ./dev/sys.h
}]],
CLOCK = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^CLOCK_MONOTONIC$ -s ^CLOCK_ /usr/include/time.h
}]],
E = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^EAGAIN$ -p ^EPIPE$ -s ^E /usr/include/errno.h
}]],
F = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^F_[GS]ETFL$ -s ^F_ /usr/include/fcntl.h
}]],
MAP = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^MAP_[SPF][HRI][AIX][^_]+$ -s ^MAP_ /usr/include/asm-generic/mman.h
}]],
O = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^O_RDONLY$ -p ^O_WRONLY$ -p ^O_RDWR$ -p ^O_NONBLOCK$ -s ^O_ /usr/include/fcntl.h
}]],
PROT = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^PROT_[RWN] -s ^PROT_ /usr/include/asm-generic/mman.h
}]],
_SC = ffi.new[[struct {
@@ -w E+M -C -p ^_SC_PAGESIZE$ -s ^_SC_ /usr/include/unistd.h
}]],
SHUT = ffi.new[[struct {
@@ -w E+M -C -p ^SHUT_RDWR$ -s ^SHUT_ ./dev/sys.h
}]],
SIG = ffi.new[[struct {
@@ -w MacroDefinition -C -p ^SIGINT$ -p ^SIGPIPE$ -s ^SIG /usr/include/signal.h
@@ -w MacroDefinition -C -p ^SIG_BLOCK$ -s ^SIG_ /usr/include/signal.h
}]],
SOCK = ffi.new[[struct {
@@ -w E+M -C -p ^SOCK_STREAM$ -s ^SOCK_ ./dev/sys.h
}]],

}
