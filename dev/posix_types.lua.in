local ffi=require"ffi"

local assert = assert

----------

ffi.cdef[[
@@ -w TypedefDecl ./dev/posix.h \
 -p ^_*clockid_t$ -p ^_*time_t$ -p ^_*suseconds_t$ \
 -p ^_*pid_t$ -p ^_*uid_t$ -p ^_*nfds_t$ -p ^_*off_t$ -p ^_*ssize_t$ \
 -p ^_*sa_family_t$ -p ^_*socklen_t$

typedef
@@ -m dev.exdecl_surrogate_struct -p ^fd_set$ ./dev/posix.h
fd_set;

typedef
@@ -m dev.exdecl_surrogate_struct -p ^sigset_t$ ./dev/posix.h
sigset_t;
]]

-- Unused, but kept for generation. See POSIX sys/types.h
--[[
@@ -w TypedefDecl ./dev/posix.h \
 -p ^_*clock_t$ \
 -p ^_*blkcnt_t$ -p ^_*blksize_t$ -p ^_*fsblkcnt_t$ -p ^_*fsfilcnt_t$ -p ^_*ino_t$ \
 -p ^_*id_t$ -p ^_*gid_t$ \
 -p ^_*mode_t$ -p ^_*nlink_t$
]]

-- NOTE: members of time structs have the 'tv_' prefix stripped.
ffi.cdef[[
struct timeval {
    time_t sec;
    suseconds_t usec;
};

struct timespec {
    time_t sec;
    long   nsec;
};

struct pollfd {
    int   fd;
    short events;
    short revents;
};
]]

-- TODO: also check glibc vs musl?
local buildFingerprint = ([[
@@ -m dev.exdecl_system_fingerprint ./dev/sys.h
]]):sub(1, -2)
-- KEEPINSYNC exdecl_system_fingerprint.lua:
local runFingerprint = ffi.os.."-"..ffi.arch
if (buildFingerprint ~= runFingerprint) then
    assert(false, [[
Platform mismatch:
  build=]]..buildFingerprint..[[ but
    run=]]..runFingerprint)
end

-- Check that on our system, the structs we want to expose include *only* the members
-- specified by POSIX.
assert(ffi.sizeof("struct timeval") ==
@@ -m dev.exdecl_struct_property -a size -p ^timeval$ ./dev/posix.h
)
assert(ffi.sizeof("struct timespec") ==
@@ -m dev.exdecl_struct_property -a size -p ^timespec$ ./dev/posix.h
)
assert(ffi.sizeof("struct pollfd") ==
@@ -m dev.exdecl_struct_property -a size -p ^pollfd$ ./dev/posix.h
)

return {}
